t     <- seq(from = 0, to = st, by = dt) #vector of time [s]
nt    <- length(t)
#== Boundary Conditions ==============
bc.upper <- rep(yearly.T(Ti,6,years=years.to.run,warming=warming)$T.year,years.to.run) # oscillate about mean Ti
bc.lower <- rep(0, nt)  #  Zero heat flux at depth
#== Target arrays to hold results =========
out.Tj  <- rbind(NULL,t(mat$Tj))
out.liq <- rbind(NULL,t(mat$liq))
out.t   <- t[0]
out.dz  <- mat$dz
out.PF <- array(dim=c(nz,years.to.run))  # empty array dim # years and num soil disc
#== Loop over time and solve =======
for (i in 1:nt) {
mat <- HcGroundImplicit(dt, mat, bc.lower[i], bc.upper[i], unfrozen.type = unfrozen.type,
unfrozen.par = unfrozen.par, bcutype = bcutype, bcltype = bcltype,
layers.sno = layers.sno, type.sno = type.sno, type.gnd = type.gnd)
#output only in specified interval
check <- i/ns - floor(i/ns)
if (check == 0) {
out.Tj  <- rbind( out.Tj,t(mat$Tj))
out.liq <- rbind(out.liq,t(mat$liq))
out.t   <- t[i]
print(paste(i,nt))
}
#Test for permafrost,
if (i%%365 == 0 & i>365*2) {
out.PF[,i/365]  <- 0
}
}
return(list(mat=mat,out.Tj=out.Tj,PF=out.PF))
}
W<-Warm(B,10,1)
W
vis(W)
plot(W$out.Tj[,1])
head(W$out.Tj)
plot(W$out.Tj[1,])
plot(W$out.Tj[2,])
plot(W$out.Tj[3,])
Warm <- function(soil,years,warming){  #could add parameters variable
## Warming is annual warming
mat <- soil$mat[,c("zj","dz","Tj","soi","wat","liq","ice","k.soi","c.soi")]
years.to.run <- years  # run for number of years before stopping
Ti <- soil$mat$Tj[1]
#make material properties and discretization
#Set time parameters
dt <- toSeconds(1,"d") # 1 day time steps
ns <- 15  # save every 15 days
st <- toSeconds(years.to.run,"y")  # [s] run it for number of years specified above
t     <- seq(from = 0, to = st, by = dt) #vector of time [s]
nt    <- length(t)
#== Boundary Conditions ==============
bc.upper <- yearly.T(Ti,6,years=years.to.run,warming=warming)$T.year # oscillate about mean Ti
bc.lower <- rep(0, nt)  #  Zero heat flux at depth
#== Target arrays to hold results =========
out.Tj  <- rbind(NULL,t(mat$Tj))
out.liq <- rbind(NULL,t(mat$liq))
out.t   <- t[0]
out.dz  <- mat$dz
out.PF <- array(dim=c(nz,years.to.run))  # empty array dim # years and num soil disc
#== Loop over time and solve =======
for (i in 1:nt) {
mat <- HcGroundImplicit(dt, mat, bc.lower[i], bc.upper[i], unfrozen.type = unfrozen.type,
unfrozen.par = unfrozen.par, bcutype = bcutype, bcltype = bcltype,
layers.sno = layers.sno, type.sno = type.sno, type.gnd = type.gnd)
#output only in specified interval
check <- i/ns - floor(i/ns)
if (check == 0) {
out.Tj  <- rbind( out.Tj,t(mat$Tj))
out.liq <- rbind(out.liq,t(mat$liq))
out.t   <- t[i]
print(paste(i,nt))
}
#Test for permafrost,
if (i%%365 == 0 & i>365*2) {
out.PF[,i/365]  <- 0
}
}
return(list(mat=mat,out.Tj=out.Tj,PF=out.PF))
}
W<-Warm(B,10,1)
vis(W)
plot(W$out.Tj[3,])
Warm <- function(soil,years,warming){  #could add parameters variable
## Warming is annual warming
mat <- soil$mat[,c("zj","dz","Tj","soi","wat","liq","ice","k.soi","c.soi")]
years.to.run <- years  # run for number of years before stopping
Ti <- soil$mat$Tj[1]
#make material properties and discretization
#Set time parameters
dt <- toSeconds(1,"d") # 1 day time steps
ns <- 15  # save every 15 days
st <- toSeconds(years.to.run,"y")  # [s] run it for number of years specified above
t     <- seq(from = 0, to = st, by = dt) #vector of time [s]
nt    <- length(t)
#== Boundary Conditions ==============
bc.upper <- yearly.T(Ti,6,years=years.to.run,warming=warming)$T.year # oscillate about mean Ti
bc.lower <- rep(0, nt)  #  Zero heat flux at depth
#== Target arrays to hold results =========
out.Tj  <- rbind(NULL,t(mat$Tj))
out.liq <- rbind(NULL,t(mat$liq))
out.t   <- t[0]
out.dz  <- mat$dz
out.PF <- array(dim=c(nz,years.to.run))  # empty array dim # years and num soil disc
#== Loop over time and solve =======
for (i in 1:nt) {
mat <- HcGroundImplicit(dt, mat, bc.lower[i], bc.upper[i], unfrozen.type = unfrozen.type,
unfrozen.par = unfrozen.par, bcutype = bcutype, bcltype = bcltype,
layers.sno = layers.sno, type.sno = type.sno, type.gnd = type.gnd)
#output only in specified interval
check <- i/ns - floor(i/ns)
if (check == 0) {
out.Tj  <- rbind( out.Tj,t(mat$Tj))
out.liq <- rbind(out.liq,t(mat$liq))
out.t   <- t[i]
print(paste(i,nt))
}
#Test for permafrost,
if (i%%365 == 0 & i>365*2) {
out.PF[,i/365]  <- 0
}
}
return(list(mat=mat,out.Tj=out.Tj,PF=out.PF,Bc=bc.upper))
}
W<-Warm(B,10,1)
plot(W$Bc)
W$Bc
ge<-yearly.T(-2,6,years=10,warming=1)
plot(ge$jul.day,ge$T.year)
ge$jul.day
yearly.T <- function(mean, amplitude, warming = 0, years = 1) {
jul.day <- c(1:(365*years))
T.year <- mean+amplitude*sin(jul.day*2*pi/365) + jul.day*warming/365
return(data.frame(jul.day,T.year))
}
ge<-yearly.T(-2,6,years=10,warming=1)
plot(ge$jul.day,ge$T.year)
ge.T
ge$T.year
ge$jul.day
source("RequiredFunctions.R")
Warm <- function(soil,years,warming){  #could add parameters variable
## Warming is annual warming
mat <- soil$mat[,c("zj","dz","Tj","soi","wat","liq","ice","k.soi","c.soi")]
years.to.run <- years  # run for number of years before stopping
Ti <- soil$mat$Tj[1]
#make material properties and discretization
#Set time parameters
dt <- toSeconds(1,"d") # 1 day time steps
ns <- 15  # save every 15 days
st <- toSeconds(years.to.run,"y")  # [s] run it for number of years specified above
t     <- seq(from = 0, to = st, by = dt) #vector of time [s]
nt    <- length(t)
#== Boundary Conditions ==============
bc.upper <- yearly.T(Ti,6,years=years.to.run,warming=warming)$T.year # oscillate about mean Ti
bc.lower <- rep(0, nt)  #  Zero heat flux at depth
#== Target arrays to hold results =========
out.Tj  <- rbind(NULL,t(mat$Tj))
out.liq <- rbind(NULL,t(mat$liq))
out.t   <- t[0]
out.dz  <- mat$dz
out.PF <- array(dim=c(nz,years.to.run))  # empty array dim # years and num soil disc
#== Loop over time and solve =======
for (i in 1:nt) {
mat <- HcGroundImplicit(dt, mat, bc.lower[i], bc.upper[i], unfrozen.type = unfrozen.type,
unfrozen.par = unfrozen.par, bcutype = bcutype, bcltype = bcltype,
layers.sno = layers.sno, type.sno = type.sno, type.gnd = type.gnd)
#output only in specified interval
check <- i/ns - floor(i/ns)
if (check == 0) {
out.Tj  <- rbind( out.Tj,t(mat$Tj))
out.liq <- rbind(out.liq,t(mat$liq))
out.t   <- t[i]
print(paste(i,nt))
}
#Test for permafrost,
if (i%%365 == 0 & i>365*2) {
out.PF[,i/365]  <- 0
}
}
return(list(mat=mat,out.Tj=out.Tj,PF=out.PF,Bc=bc.upper))
}
W<-Warm(B,10,1)
(W)
vis(W)
vis(B)
vis(W)
vis(B)
vis(B)
vis(W)
365/5
vis <- function(PF.output){
for (i in seq(1,length(PF.output$out.Tj[,1]),1)) {
plot(PF.output$out.Tj[i,],PF.output$mat$zj, type="l", xlim=c(-10,3))
Sys.sleep(.03)
}
}
vis(B)
vis <- function(PF.output){
for (i in seq(1,length(PF.output$out.Tj[,1]),1)) {
plot(PF.output$out.Tj[i,],PF.output$mat$zj, type="l", xlim=c(-10,3))
Sys.sleep(.1)
}
}
vis(B)
vis <- function(PF.output){
for (i in seq(1,length(PF.output$out.Tj[,1]),1)) {
plot(PF.output$out.Tj[i,],PF.output$mat$zj, type="l", xlim=c(-10,3))
Sys.sleep(.05)
}
}
vis(B)
vis <- function(PF.output,fps=0.1){
for (i in seq(1,length(PF.output$out.Tj[,1]),1)) {
plot(PF.output$out.Tj[i,],PF.output$mat$zj, type="l", xlim=c(-10,3))
Sys.sleep(fps)
}
}
vis(W,fps=0.05)
vis(W)
plot(W$out.Tj[,1])
plot(W$out.Tj[1,])
W$out.Tj[1:365,]<0
W$out.Tj[1:10,]<0
W$out.Tj[1:10,]
W$out.Tj[1:floor(365/15),]
lapply(W$out.Tj[1:10,],max)
help(apply)
apply(W$out.Tj[1:10,],2,max)
apply(W$out.Tj[1:10,],2,max)<0
365/5
365*2/5
Warm <- function(soil,years,warming){  #could add parameters variable
## Warming is annual warming
mat <- soil$mat[,c("zj","dz","Tj","soi","wat","liq","ice","k.soi","c.soi")]
years.to.run <- years  # run for number of years before stopping
Ti <- soil$mat$Tj[1]
#make material properties and discretization
#Set time parameters
dt <- toSeconds(1,"d") # 1 day time steps
ns <- 5  # save every 5 days
st <- toSeconds(years.to.run,"y")  # [s] run it for number of years specified above
t     <- seq(from = 0, to = st, by = dt) #vector of time [s]
nt    <- length(t)
#== Boundary Conditions ==============
bc.upper <- yearly.T(Ti,6,years=years.to.run,warming=warming)$T.year # oscillate about mean Ti
bc.lower <- rep(0, nt)  #  Zero heat flux at depth
#== Target arrays to hold results =========
out.Tj  <- rbind(NULL,t(mat$Tj))
out.liq <- rbind(NULL,t(mat$liq))
out.t   <- t[0]
out.dz  <- mat$dz
out.PF <- array(dim=c(nz,years.to.run))  # empty array dim # years and num soil disc
#== Loop over time and solve =======
for (i in 1:nt) {
mat <- HcGroundImplicit(dt, mat, bc.lower[i], bc.upper[i], unfrozen.type = unfrozen.type,
unfrozen.par = unfrozen.par, bcutype = bcutype, bcltype = bcltype,
layers.sno = layers.sno, type.sno = type.sno, type.gnd = type.gnd)
#output only in specified interval
check <- i/ns - floor(i/ns)
if (check == 0) {
out.Tj  <- rbind( out.Tj,t(mat$Tj))
out.liq <- rbind(out.liq,t(mat$liq))
out.t   <- t[i]
print(paste(i,nt))
}
#Test for permafrost,
if (i%%365 == 0 & i>365*2) {
snapshot_2yr <- apply(out.Tj[(i-146):i,],max,2)
out.PF[,i/365]  <- snapshot_2yr
}
}
return(list(mat=mat,out.Tj=out.Tj,PF=out.PF,Bc=bc.upper))
}
W<-Warm(B,10,1)
Warm <- function(soil,years,warming){  #could add parameters variable
## Warming is annual warming
mat <- soil$mat[,c("zj","dz","Tj","soi","wat","liq","ice","k.soi","c.soi")]
years.to.run <- years  # run for number of years before stopping
Ti <- soil$mat$Tj[1]
#make material properties and discretization
#Set time parameters
dt <- toSeconds(1,"d") # 1 day time steps
ns <- 5  # save every 5 days
st <- toSeconds(years.to.run,"y")  # [s] run it for number of years specified above
t     <- seq(from = 0, to = st, by = dt) #vector of time [s]
nt    <- length(t)
#== Boundary Conditions ==============
bc.upper <- yearly.T(Ti,6,years=years.to.run,warming=warming)$T.year # oscillate about mean Ti
bc.lower <- rep(0, nt)  #  Zero heat flux at depth
#== Target arrays to hold results =========
out.Tj  <- rbind(NULL,t(mat$Tj))
out.liq <- rbind(NULL,t(mat$liq))
out.t   <- t[0]
out.dz  <- mat$dz
out.PF <- array(dim=c(nz,years.to.run))  # empty array dim # years and num soil disc
#== Loop over time and solve =======
for (i in 1:nt) {
mat <- HcGroundImplicit(dt, mat, bc.lower[i], bc.upper[i], unfrozen.type = unfrozen.type,
unfrozen.par = unfrozen.par, bcutype = bcutype, bcltype = bcltype,
layers.sno = layers.sno, type.sno = type.sno, type.gnd = type.gnd)
#output only in specified interval
check <- i/ns - floor(i/ns)
if (check == 0) {
out.Tj  <- rbind( out.Tj,t(mat$Tj))
out.liq <- rbind(out.liq,t(mat$liq))
out.t   <- t[i]
print(paste(i,nt))
}
#Test for permafrost,
if (i%%365 == 0 & i>365*2) {
snapshot_2yr <- apply(out.Tj[(i-146):i,],2,max) # True if <0 for last 2 yr (note 146 = 2yr*(365/5), where 5=ns)
out.PF[,i/365]  <- snapshot_2yr
}
}
return(list(mat=mat,out.Tj=out.Tj,PF=out.PF,Bc=bc.upper))
}
W<-Warm(B,10,1)
<- function(soil,years,warming){  #could add parameters variable
## Warming is annual warming
mat <- soil$mat[,c("zj","dz","Tj","soi","wat","liq","ice","k.soi","c.soi")]
years.to.run <- years  # run for number of years before stopping
Ti <- soil$mat$Tj[1]
#make material properties and discretization
#Set time parameters
dt <- toSeconds(1,"d") # 1 day time steps
ns <- 5  # save every 5 days
st <- toSeconds(years.to.run,"y")  # [s] run it for number of years specified above
t     <- seq(from = 0, to = st, by = dt) #vector of time [s]
nt    <- length(t)
#== Boundary Conditions ==============
bc.upper <- yearly.T(Ti,6,years=years.to.run,warming=warming)$T.year # oscillate about mean Ti
bc.lower <- rep(0, nt)  #  Zero heat flux at depth
#== Target arrays to hold results =========
out.Tj  <- rbind(NULL,t(mat$Tj))
out.liq <- rbind(NULL,t(mat$liq))
out.t   <- t[0]
out.dz  <- mat$dz
out.PF <- array(dim=c(nz,years.to.run))  # empty array dim # years and num soil disc
#== Loop over time and solve =======
for (i in 1:nt) {
mat <- HcGroundImplicit(dt, mat, bc.lower[i], bc.upper[i], unfrozen.type = unfrozen.type,
unfrozen.par = unfrozen.par, bcutype = bcutype, bcltype = bcltype,
layers.sno = layers.sno, type.sno = type.sno, type.gnd = type.gnd)
#output only in specified interval
check <- i/ns - floor(i/ns)
if (check == 0) {
out.Tj  <- rbind( out.Tj,t(mat$Tj))
out.liq <- rbind(out.liq,t(mat$liq))
out.t   <- t[i]
print(paste(i,nt))
}
#Test for permafrost,
if (i%%365 == 0 & i>365*2) {
snapshot_2yr <- apply(out.Tj[((i/5)-146):(i/5),],2,max) # True if <0 for last 2 yr (note 146 = 2yr*(365/5), where 5=ns)
out.PF[,i/365]  <- snapshot_2yr #
}
}
return(list(mat=mat,out.Tj=out.Tj,PF=out.PF,Bc=bc.upper))
}
## Visualize!!
vis <- function(PF.output,fps=0.1){
for (i in seq(1,length(PF.output$out.Tj[,1]),1)) {
plot(PF.output$out.Tj[i,],PF.output$mat$zj, type="l", xlim=c(-10,3))
Sys.sleep(fps)
}
}
Warm <- function(soil,years,warming){  #could add parameters variable
## Warming is annual warming
mat <- soil$mat[,c("zj","dz","Tj","soi","wat","liq","ice","k.soi","c.soi")]
years.to.run <- years  # run for number of years before stopping
Ti <- soil$mat$Tj[1]
#make material properties and discretization
#Set time parameters
dt <- toSeconds(1,"d") # 1 day time steps
ns <- 5  # save every 5 days
st <- toSeconds(years.to.run,"y")  # [s] run it for number of years specified above
t     <- seq(from = 0, to = st, by = dt) #vector of time [s]
nt    <- length(t)
#== Boundary Conditions ==============
bc.upper <- yearly.T(Ti,6,years=years.to.run,warming=warming)$T.year # oscillate about mean Ti
bc.lower <- rep(0, nt)  #  Zero heat flux at depth
#== Target arrays to hold results =========
out.Tj  <- rbind(NULL,t(mat$Tj))
out.liq <- rbind(NULL,t(mat$liq))
out.t   <- t[0]
out.dz  <- mat$dz
out.PF <- array(dim=c(nz,years.to.run))  # empty array dim # years and num soil disc
#== Loop over time and solve =======
for (i in 1:nt) {
mat <- HcGroundImplicit(dt, mat, bc.lower[i], bc.upper[i], unfrozen.type = unfrozen.type,
unfrozen.par = unfrozen.par, bcutype = bcutype, bcltype = bcltype,
layers.sno = layers.sno, type.sno = type.sno, type.gnd = type.gnd)
#output only in specified interval
check <- i/ns - floor(i/ns)
if (check == 0) {
out.Tj  <- rbind( out.Tj,t(mat$Tj))
out.liq <- rbind(out.liq,t(mat$liq))
out.t   <- t[i]
print(paste(i,nt))
}
#Test for permafrost,
if (i%%365 == 0 & i>365*2) {
snapshot_2yr <- apply(out.Tj[((i/5)-146):(i/5),],2,max) # True if <0 for last 2 yr (note 146 = 2yr*(365/5), where 5=ns)
out.PF[,i/365]  <- snapshot_2yr #
}
}
return(list(mat=mat,out.Tj=out.Tj,PF=out.PF,Bc=bc.upper))
}
## Visualize!!
vis <- function(PF.output,fps=0.1){
for (i in seq(1,length(PF.output$out.Tj[,1]),1)) {
plot(PF.output$out.Tj[i,],PF.output$mat$zj, type="l", xlim=c(-10,3))
Sys.sleep(fps)
}
}
W<-Warm(B,10,1)
W$PF
Warm <- function(soil,years,warming){  #could add parameters variable
## Warming is annual warming
mat <- soil$mat[,c("zj","dz","Tj","soi","wat","liq","ice","k.soi","c.soi")]
years.to.run <- years  # run for number of years before stopping
Ti <- soil$mat$Tj[1]
#make material properties and discretization
#Set time parameters
dt <- toSeconds(1,"d") # 1 day time steps
ns <- 5  # save every 5 days
st <- toSeconds(years.to.run,"y")  # [s] run it for number of years specified above
t     <- seq(from = 0, to = st, by = dt) #vector of time [s]
nt    <- length(t)
#== Boundary Conditions ==============
bc.upper <- yearly.T(Ti,6,years=years.to.run,warming=warming)$T.year # oscillate about mean Ti
bc.lower <- rep(0, nt)  #  Zero heat flux at depth
#== Target arrays to hold results =========
out.Tj  <- rbind(NULL,t(mat$Tj))
out.liq <- rbind(NULL,t(mat$liq))
out.t   <- t[0]
out.dz  <- mat$dz
out.PF <- array(dim=c(nz,years.to.run))  # empty array dim # years and num soil disc
#== Loop over time and solve =======
for (i in 1:nt) {
mat <- HcGroundImplicit(dt, mat, bc.lower[i], bc.upper[i], unfrozen.type = unfrozen.type,
unfrozen.par = unfrozen.par, bcutype = bcutype, bcltype = bcltype,
layers.sno = layers.sno, type.sno = type.sno, type.gnd = type.gnd)
#output only in specified interval
check <- i/ns - floor(i/ns)
if (check == 0) {
out.Tj  <- rbind( out.Tj,t(mat$Tj))
out.liq <- rbind(out.liq,t(mat$liq))
out.t   <- t[i]
print(paste(i,nt))
}
#Test for permafrost,
if (i%%365 == 0 & i>365*2) {
snapshot_2yr <- apply(out.Tj[((i/5)-146):(i/5),],2,max) # True if <0 for last 2 yr (note 146 = 2yr*(365/5), where 5=ns)
out.PF[,i/365]  <- snapshot_2yr < 0 # build true false if PF or no
}
}
return(list(mat=mat,out.Tj=out.Tj,PF=out.PF,Bc=bc.upper))
}
W<-Warm(B,10,1)
W$PF
W$mat
Warm <- function(soil,years,warming){  #could add parameters variable
## Warming is annual warming
mat <- soil$mat[,c("zj","dz","Tj","soi","wat","liq","ice","k.soi","c.soi")]
years.to.run <- years  # run for number of years before stopping
Ti <- soil$mat$Tj[1]
#make material properties and discretization
#Set time parameters
dt <- toSeconds(1,"d") # 1 day time steps
ns <- 5  # save every 5 days
st <- toSeconds(years.to.run,"y")  # [s] run it for number of years specified above
t     <- seq(from = 0, to = st, by = dt) #vector of time [s]
nt    <- length(t)
#== Boundary Conditions ==============
bc.upper <- yearly.T(Ti,6,years=years.to.run,warming=warming)$T.year # oscillate about mean Ti
bc.lower <- rep(0, nt)  #  Zero heat flux at depth
#== Target arrays to hold results =========
out.Tj  <- rbind(NULL,t(mat$Tj))
out.liq <- rbind(NULL,t(mat$liq))
out.t   <- t[0]
out.dz  <- mat$dz
out.mat  <- mat
out.PF <- array(dim=c(nz,years.to.run))  # empty array dim # years and num soil disc
#== Loop over time and solve =======
for (i in 1:nt) {
mat <- HcGroundImplicit(dt, mat, bc.lower[i], bc.upper[i], unfrozen.type = unfrozen.type,
unfrozen.par = unfrozen.par, bcutype = bcutype, bcltype = bcltype,
layers.sno = layers.sno, type.sno = type.sno, type.gnd = type.gnd)
#output only in specified interval
check <- i/ns - floor(i/ns)
if (check == 0) {
out.Tj  <- rbind( out.Tj,t(mat$Tj))
out.liq <- rbind(out.liq,t(mat$liq))
out.t   <- t[i]
print(paste(i,nt))
}
#Test for permafrost,
if (i%%365 == 0 & i>365*2) {
snapshot_2yr <- apply(out.Tj[((i/5)-146):(i/5),],2,max) # True if <0 for last 2 yr (note 146 = 2yr*(365/5), where 5=ns)
out.PF[,i/365]  <- snapshot_2yr < 0 # build true false if PF or no
}
}
return(list(mat=out.mat,out.Tj=out.Tj,PF=out.PF,Bc=bc.upper))
}
W<-Warm(B,10,3)
vis(W)
vis(W,fps=.03)
vis(W,fps=.09)
vis(W,fps=.05)
W$PF
